directive = ($http) ->
  # A container for all the s3 related policies
  # that are pulled from /api/aws/s3_access_token
  s3 = {}

  # Generates a random string of chars to prevent name collisions on the S3
  # bucket (because tomato.png is going to be in use already).
  randChr = (length) ->
    chars = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
    result = ""
    i = length

    while i > 0
      result += chars[Math.round(Math.random() * (chars.length - 1))]
      --i
    result

  # Just a callback to set the S3 policy object that was returned from the serv.
  handleKey = (resp, stat) ->
    s3 = resp

  # Error handler for when unable to retrieve S3 access token.
  failKey = (resp, stat) ->
    alert "Key generation error. Try refreshing the page. #{stat}:#{resp.error}"

  # Error handler for when unable to post to AWS.
  badUpload = (event) ->
    alert 'can\'t upload file to server. See JS Console for technical details.'
    window.currentUpload = undefined

  # success handler for when the file is uploaded. Extracts the new URL and
  # attaches it to $scope.attr_name_you_gave_to_uploader
  goodUpload = (event) ->
    url = event
          .currentTarget
          .responseXML
          .getElementsByTagName("Location")[0]
          .innerHTML
    currentUpload.scope[currentUpload.attr.uploader] = url
    currentUpload.scope.$digest()
    window.currentUpload = undefined

  # Handles the file on disk that the user is uploading. DOM callback.
  handleFile = (event) ->
    file = @files[0]
    sendToAws(file)
    true

  # Bundles up the select file and sends it off to AWS.
  sendToAws = (file) ->
    random_file_path = "temp/#{randChr(11)}.#{file.name.split('.').pop()}"
    fd = new FormData()
    fd.append "success_action_status", 201
    fd.append "key", random_file_path
    fd.append "acl", 'public-read'
    fd.append "Content-Type", file.type
    fd.append "AWSAccessKeyId", s3.key  #ex: "AKIAIMEZ67MHXLYQ6JNQ"
    fd.append "policy", s3.policy       # "zE1Ml(long)1dfQ=="
    fd.append "signature", s3.signature # "EPA(short)U7I="
    fd.append "file", file

    uri = "https://<%= ENV['S3_BUCKET_NAME'] %>.s3.amazonaws.com/"

    xhr = new XMLHttpRequest()
    xhr.addEventListener("load", goodUpload, false);
    xhr.addEventListener("error", badUpload, false);
    xhr.open('POST', uri, true)
    xhr.send(fd)

  # Responsible for downloading the S3 acccess token off of the server
  getS3Permissions = ->
    $http
      .get("/api/aws/s3_access_token")
      .success(handleKey)
      .error(failKey)

  # Return the angular directive object. . .
  restrict: "A"
  link: ($scope, el, attr) ->
    window.currentUpload = {scope: $scope, el: el, attr: attr}
    el.on "click", getS3Permissions
    el.on "change", handleFile

openFarmModule.directive "uploader", [
  "$http"
  directive
]
